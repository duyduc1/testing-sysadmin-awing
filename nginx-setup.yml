- name: Install and Configure Nginx Web Server
  hosts: webserver
  become: yes
  vars_files:
    - vars.yml

  tasks:
    - name: Install Nginx package
      package:
        name: "{{ nginx_package }}"
        state: present
      notify: restart nginx
      register: nginx_install
      failed_when: nginx_install.failed

    - name: Ensure firewall is running and port 80 is open
      ufw:
        state: enabled
        rule: allow
        port: '80'
        proto: tcp
      when: ansible_os_family == "Debian"
      notify: reload firewalld
      register: ufw_status
      failed_when: ufw_status.failed

    - name: Ensure Nginx is running and enabled
      systemd:
        name: "{{ nginx_service }}"
        state: started
        enabled: yes
      register: nginx_service_status
      failed_when: nginx_service_status.failed

    - name: Deploy custom index.html
      template:
        src: index.html.j2
        dest: "{{ nginx_web_root }}"
        owner: www-data
        group: www-data
        mode: '0644'
      notify: restart nginx
      register: index_deploy
      failed_when: index_deploy.failed

    - name: Configure log rotation for Nginx
      template:
        src: nginx_logrotate.j2
        dest: /etc/logrotate.d/nginx-custom
        owner: root
        group: root
        mode: '0644'
      notify: restart nginx
      register: logrotate_config
      failed_when: logrotate_config.failed

    - name: Create deployment log
      lineinfile:
        path: /var/log/ansible-deployment.log
        line: "Nginx deployed on {{ ansible_date_time.iso8601 }} on {{ inventory_hostname }} - Status: {{ 'Success' if nginx_service_status.state == 'started' else 'Failed' }}"
        create: yes
        owner: root
        group: root
        mode: '0644'
      register: log_write
      failed_when: log_write.failed

    - name: Verify Nginx is accessible
      uri:
        url: "http://{{ ansible_host }}"
        status_code: 200
      register: web_check
      retries: 3
      delay: 5
      failed_when: web_check.status != 200

  handlers:
    - name: restart nginx
      systemd:
        name: "{{ nginx_service }}"
        state: restarted

    - name: reload firewalld
      systemd:
        name: firewalld
        state: reloaded